module NavierStokes_ConvectionDiffusion
"""
    NavierStokes_ConvectionDiffusion

    This module contains the functions for the Navier-Stokes equations with convection-diffusion.

    # Examples
    ```julia-repl
    julia> using NavierStokes_ConvectionDiffusion
    julia> solve_NSCD()
    ```
"""

using Gridap
using Parameters
using DrWatson

export NavierStokes_ConvectionDiffusion_params, solve_NSCD

"""
    solve_NSCD(params)

    This function solves the Navier-Stokes equations with convection-diffusion on
    a 2D rectangular domain using the finite element method. We assume a channel
    flow with a parabolic inflow profile and an osmosis membrane in the middle of
    the channel. The membrane is modeled as a Robin boundary condition.

    # Arguments
    - `params::Parameters`: A Parameters object containing the parameters of the problem.

    # Output
    - vtk file with the solution, stored in the `data/sims` folder.
"""
function solve_NSCD(params)

  # Define the domain
  @unpack H,L,nex,ney = params
  ùíØ = CartesianDiscreteModel((0,L,0,2H), (nex,ney))
  Œ© = Interior(ùíØ)

  # Divide channel
  function is_in_feed_channel(coords)
    coords_avg = sum(coords)/length(coords) # center of the cell
    [ x·µ¢[2] < H for x·µ¢ in coords_avg] # check if the center of the cell is above or below the membrane
  end
  coords = get_cell_coordinates(Œ©)
  feed_channel_mask = is_in_feed_channel(coords)
  feed_channel_indeces = findall(feed_channel_mask)
  permeate_channel_indeces = findall(.!feed_channel_mask)
  Œ©f = Interior(Œ©, feed_channel_indeces)
  Œ©p = Interior(Œ©, permeate_channel_indeces)

  # Define boundary tags
  labels_Œ© = get_face_labeling(ùíØ)
  add_tag_from_tags!(labels_Œ©,"top",[3,4,6])       # assign the label "top" to the entity 3,4 and 6 (top corners and top side)
  add_tag_from_tags!(labels_Œ©,"bottom",[1,2,5])    # assign the label "bottom" to the entity 1,2 and 5 (bottom corners and bottom side)
  add_tag_from_tags!(labels_Œ©,"inlet",[7])         # assign the label "inlet" to the entity 7 (left side)
  add_tag_from_tags!(labels_Œ©,"outlet",[8])        # assign the label "outlet" to the entity 8 (right side)

  # Define boundaries
  Œìfp = Interface(Œ©f,Œ©p)
  Œìin = Boundary(Œ©, tags="inlet")
  Œìout = Boundary(Œ©, tags="outlet")
  Œìtop = Boundary(Œ©, tags="top")
  Œìb = Boundary(Œ©, tags="bottom")
  nfp = get_normal_vector(Œìfp)
  nb = get_normal_vector(Œìb)

  # Boundary condition
  @unpack U‚àû = params
  uin((x,y),t) = VectorValue(3/2*U‚àû*(1.0-(y/H)^2),0.0)*(y<H) + VectorValue(0.0,0.0)*(y>=H)
  uin(t::Real) = x -> uin(x,t)
  utop((x,y),t) = VectorValue(0.0,0.0)
  utop(t::Real) = x -> utop(x,t)
  œïin((x,y),t) = 35000 * (y<H)
  œïin(t::Real) = x -> œïin(x,t)

  # Define the finite element spaces
  @unpack order = params
  reffe·µ§ = ReferenceFE(lagrangian,VectorValue{2,Float64},order)
  reffe‚Çö = ReferenceFE(lagrangian,Float64,order-1)
  reffe·µ© = ReferenceFE(lagrangian,Float64,order)
  V = TestFESpace(Œ©,reffe·µ§, conformity=:H1, dirichlet_tags=["inlet","top","bottom"],dirichlet_masks=[(true,true),(true,true),(false,true)])
  U = TransientTrialFESpace(V, [uin,utop,utop])
  Q = TestFESpace(Œ©,reffe‚Çö, conformity=:L2)
  P = TrialFESpace(Q)
  Œ® = TestFESpace(Œ©,reffe·µ©, conformity=:L2, dirichlet_tags=["inlet"])
  Œ¶ = TransientTrialFESpace(Œ®,œïin)
  X = TransientMultiFieldFESpace([U,P,Œ¶])
  Y = MultiFieldFESpace([V,Q,Œ®])

  # Initial solution
  x‚Çï‚ÇÄ = interpolate_everywhere([uin(0.0),0.0,œïin(0.0)],X(0.0))
  filename = datadir("sims","sol0")
  writevtk(Œ©,filename,cellfields=["u"=>x‚Çï‚ÇÄ[1],"p"=>x‚Çï‚ÇÄ[2],"phi"=>x‚Çï‚ÇÄ[3]])

  # Measures
  degree = 2*order
  dŒ© = Measure(Œ©,degree)
  dŒìfp = Measure(Œìfp,degree)
  dŒìb = Measure(Œìb,degree)

  # Operators
  @unpack Œº,œÅw,œÅs,ùíü,K,C,T = params
  ŒΩ = Œº/œÅw
  res(t,(u,p,œï),(v,q,œà)) = ‚à´( (‚àÇt(u) + (u‚ãÖ‚àá(u))) ‚ãÖ v + ŒΩ*(‚àá(u)‚äô‚àá(v)) - p*(‚àá‚ãÖv) + q*(‚àá‚ãÖu) +
                              œÅw*(‚àÇt(œï) + (u‚ãÖ‚àá(œï))) ‚ãÖ œà + œÅw*ùíü*(‚àá(œï)‚äô‚àá(œà)) )dŒ© +
                              ‚à´(p*nb‚ãÖv)dŒìb -
                              ‚à´( œÅw*(mean(u)‚ãÖnfp.‚Å∫)*(jump(œï)*mean(œà)) + œÅw*ùíü*(mean(‚àá(œï))‚ãÖjump(œà‚äónfp)) -
                                 1/K*((mean(u) + C*T*jump(œï*nfp))‚ãÖmean(v)))dŒìfp
  jac(t,(u,p,œï),(du,dp,dœï),(v,q,œà)) = ‚à´( ((du‚ãÖ‚àá(u)) + (u‚ãÖ‚àá(du))) ‚ãÖ v + Œº*(‚àá(du)‚äô‚àá(v)) - dp*(‚àá‚ãÖv) + q*(‚àá‚ãÖdu) +
                                          œÅw*((du‚ãÖ‚àá(œï)) + (u‚ãÖ‚àá(dœï))) ‚ãÖ œà + ùíü*(‚àá(dœï)‚äô‚àá(œà)) )dŒ© +
                                          ‚à´(dp*nb‚ãÖv)dŒìb -
                                      ‚à´( œÅw*(mean(du)‚ãÖnfp.‚Å∫)*(jump(œï)*mean(œà)) + œÅw*(mean(u)‚ãÖnfp.‚Å∫)*(jump(dœï)*mean(œà)) +
                                         œÅw*ùíü*(mean(‚àá(dœï))‚ãÖjump(œà‚äónfp)) - 1/K*((mean(du) + C*T*jump(dœï*nfp))‚ãÖmean(v)))dŒìfp
  jac_t(t,(u,p,œï),(dut,dpt,dœït),(v,q,œà)) = ‚à´( (dut) ‚ãÖ v + œÅw*(dœït) ‚ãÖ œà )dŒ©
  op = TransientFEOperator(res,jac,jac_t,X,Y)

  # Solver
  @unpack Œît,tf = params
  nls = NLSolver(show_trace=true,method=:newton,iterations=15)
  ode_solver = ThetaMethod(nls,Œît,1.0)

  # solution
  x‚Çï‚Çú = solve(ode_solver,op,x‚Çï‚ÇÄ,0.0,tf)

  # Post-processing
  filename = datadir("sims","sol")
  createpvd(filename) do pvd
    for ((u‚Çï,p‚Çï,œï‚Çï),t) in x‚Çï‚Çú
      pvd[t] = createvtk(Œ©,filename*"_$t",cellfields=["u"=>u‚Çï,"p"=>p‚Çï,"phi"=>œï‚Çï])
    end
  end

  return nothing

end

"""
NavierStokes_ConvectionDiffusion_params

This type defines a Parameters object with the default parameters for the
  NS_CD problem.
"""
@with_kw struct NavierStokes_ConvectionDiffusion_params
  H::Float64 = 4.0e-1 # Height of the half-channel
  L::Float64 = 1.0 # Length of the channel
  Œº::Float64 = 1.0e-0 # Dynamic viscosity
  ùíü::Float64 = 1.69e-0 # Diffusion coefficient
  K::Float64 = 3.6e-0 # Permeability of the membrane
  C::Float64 = 0.2641 # Concentration vs osmotic pressure coefficient
  T::Float64 = 298.0 # Temperature
  œÅw::Float64 = 1.0e0 # Density of water
  œÅs::Float64 = 1.0e0 # Density of salt
  nex::Int = 2 # Number of elements in x direction
  ney ::Int = 2 # Number of elements in y direction
  order::Int = 1 # Order of the finite elements
  U‚àû::Float64 = 0.06 # Inlet velocity
  Œît::Float64 = 0.1 # Time step
  tf::Float64 = 0.1 # Final time
end
end
