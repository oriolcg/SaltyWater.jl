module NavierStokes_ConvectionDiffusion
"""
    NavierStokes_ConvectionDiffusion

    This module contains the functions for the Navier-Stokes equations with convection-diffusion.

    # Examples
    ```julia-repl
    julia> using NavierStokes_ConvectionDiffusion
    julia> solve_NSCD()
    ```
"""

using Gridap
using Gridap.FESpaces: zero_free_values, interpolate!
using Gridap.Fields: meas
using Parameters
using DrWatson

export NavierStokes_ConvectionDiffusion_params, solve_NSCD

"""
    solve_NSCD(params)

    This function solves the Navier-Stokes equations with convection-diffusion on
    a 2D rectangular domain using the finite element method. We assume a channel
    flow with a parabolic inflow profile and an osmosis membrane in the middle of
    the channel. The membrane is modeled as a Robin boundary condition.

    # Arguments
    - `params::Parameters`: A Parameters object containing the parameters of the problem.

    # Output
    - vtk file with the solution, stored in the `data/sims` folder.
"""
function solve_NSCD(params)

  # Define the domain
  @unpack H,L,nex,ney = params
  ùíØ = CartesianDiscreteModel((0,L,0,2H), (nex,ney))
  Œ© = Interior(ùíØ)

  # Divide channel
  function is_in_feed_channel(coords)
    array = Bool[]
    for coords·µ¢ in coords
      y_avg = 0.0
      for coord·µ¢ in coords·µ¢
        y_avg += coord·µ¢[2]
      end
      y_avg /= length(coords·µ¢)
      push!(array, y_avg < H)
    end
    return array
  end
  coords = get_cell_coordinates(Œ©)
  feed_channel_mask = is_in_feed_channel(coords)
  feed_channel_indeces = findall(feed_channel_mask)
  permeate_channel_indeces = findall(.!feed_channel_mask)
  Œ©f = Interior(Œ©, feed_channel_indeces)
  Œ©p = Interior(Œ©, permeate_channel_indeces)

  # Define boundary tags
  labels_Œ© = get_face_labeling(ùíØ)
  add_tag_from_tags!(labels_Œ©,"top",[3,4,6])       # assign the label "top" to the entity 3,4 and 6 (top corners and top side)
  add_tag_from_tags!(labels_Œ©,"bottom",[1,2,5])    # assign the label "bottom" to the entity 1,2 and 5 (bottom corners and bottom side)
  add_tag_from_tags!(labels_Œ©,"inlet",[7])         # assign the label "inlet" to the entity 7 (left side)
  add_tag_from_tags!(labels_Œ©,"outlet",[8])        # assign the label "outlet" to the entity 8 (right side)

  # Define boundaries
  Œìfp = Interface(Œ©f,Œ©p)
  Œìin = Boundary(Œ©, tags="inlet")
  Œìout = Boundary(Œ©, tags="outlet")
  Œìtop = Boundary(Œ©, tags="top")
  Œìb = Boundary(Œ©, tags="bottom")
  nfp = get_normal_vector(Œìfp)
  nb = get_normal_vector(Œìb)

  # Boundary condition
  @unpack U‚àû = params
  uin((x,y),t) = VectorValue(3/2*U‚àû*(1.0-(y/H)^2),0.0)*(y<H) + VectorValue(0.0,0.0)*(y>=H)
  uin(t::Real) = x -> uin(x,t)
  utop((x,y),t) = VectorValue(0.0,0.0)
  utop(t::Real) = x -> utop(x,t)
  œïin((x,y),t) = 35000 * (y<H)
  œïin(t::Real) = x -> œïin(x,t)

  # Define the finite element spaces
  @unpack order = params
  reffe·µ§ = ReferenceFE(lagrangian,VectorValue{2,Float64},order)
  reffe‚Çö = ReferenceFE(lagrangian,Float64,order-1)
  reffe·µ© = ReferenceFE(lagrangian,Float64,order)
  V = TestFESpace(Œ©,reffe·µ§, conformity=:H1, dirichlet_tags=["inlet","top","bottom"],dirichlet_masks=[(true,true),(true,true),(false,true)])
  U = TransientTrialFESpace(V, [uin,utop,utop])
  Qf = TestFESpace(Œ©f,reffe‚Çö, conformity=:C0)
  Qp = TestFESpace(Œ©p,reffe‚Çö, conformity=:C0)
  Pf = TrialFESpace(Qf)
  Pp = TrialFESpace(Qp)
  Œ®f = TestFESpace(Œ©f,reffe·µ©, conformity=:H1, dirichlet_tags=["inlet"])
  Œ¶f = TransientTrialFESpace(Œ®f,œïin)
  Œ®p = TestFESpace(Œ©p,reffe·µ©, conformity=:H1, dirichlet_tags=["inlet"])
  Œ¶p = TransientTrialFESpace(Œ®p,œïin)
  X = TransientMultiFieldFESpace([U,Pf,Pp,Œ¶f,Œ¶p])
  Y = MultiFieldFESpace([V,Qf,Qp,Œ®f,Œ®p])

  Œó = TrialFESpace(V, [utop(0.0),utop(0.0),utop(0.0)])
  ŒóŒ¶f = TrialFESpace(Œ®f,0.0)
  ŒóŒ¶p = TrialFESpace(Œ®p,0.0)

  # Initial solution
  x‚Çï‚ÇÄ = interpolate_everywhere([uin(0.0),0.0,0.0,œïin(0.0),œïin(0.0)],X(0.0))
  filename = datadir("sims","sol0")
  writevtk(Œ©,filename,cellfields=["u"=>x‚Çï‚ÇÄ[1],"pf"=>x‚Çï‚ÇÄ[2],"pp"=>x‚Çï‚ÇÄ[3],"phif"=>x‚Çï‚ÇÄ[4],"phip"=>x‚Çï‚ÇÄ[5]],order=order)

  # Measures
  degree = 2*order
  dŒ© = Measure(Œ©,degree)
  dŒ©f = Measure(Œ©f,degree)
  dŒ©p = Measure(Œ©p,degree)
  dŒìfp = Measure(Œìfp,degree)
  dŒìb = Measure(Œìb,degree)

  # Explicit FE functions
  global Œ∑‚Çô‚Çï = interpolate(utop(0),Œó)
  global u‚Çô‚Çï = interpolate(uin(0.0),U(0.0))
  global fv_u = zero_free_values(U(0.0))
  global Œ∑œïf‚Çô‚Çï = interpolate(0.0,ŒóŒ¶f)
  global œïf‚Çô‚Çï = interpolate(œïin(0),Œ¶f(0.0))
  global fv_œïf = zero_free_values(Œ¶f(0.0))
  global Œ∑œïp‚Çô‚Çï = interpolate(0.0,ŒóŒ¶p)
  global œïp‚Çô‚Çï = interpolate(œïin(0),Œ¶p(0.0))
  global fv_œïp = zero_free_values(Œ¶p(0.0))

  # Physics parameters
  @unpack Œº,œÅw,œÅs,ùíü,K,C,T = params
  ŒΩ = Œº/œÅw

  # Stabilization Parameters
  c‚ÇÅ = 12.0
  c‚ÇÇ = 2.0
  cc = 4.0
  h2 = CellField(get_cell_measure(Œ©),Œ©)
  h = CellField(lazy_map(dx->dx^(1/2),get_cell_measure(Œ©)),Œ©)
  œÑ‚Çò = 1/(c‚ÇÅ*ŒΩ/h2 + c‚ÇÇ*(meas‚àòu‚Çô‚Çï)/h)
  œÑc = cc *(h2/(c‚ÇÅ*œÑ‚Çò))
  œÑ‚Çò·µ© = 1/(c‚ÇÅ*(ùíü/œÅw)/h2 + c‚ÇÇ*(meas‚àòu‚Çô‚Çï)/h)

  # Auxiliar jump Operators
  jumpfp(uf,up) = uf.‚Å∫‚ãÖnfp.‚Å∫ - up.‚Åª‚ãÖnfp.‚Å∫
  meanfp(uf,up) = uf.‚Å∫ + up.‚Åª

  # Operators
  res(t,(u,pf,pp,œïf,œïp),(v,qf,qp,œàf,œàp)) = ‚à´( (‚àÇt(u) + (u‚ãÖ‚àá(u))) ‚ãÖ v + ŒΩ*(‚àá(u)‚äô‚àá(v)) +
                              œÑ‚Çò*((‚àá(u)'‚ãÖu - Œ∑‚Çô‚Çï)‚ãÖ(‚àá(v)'‚ãÖu)) + œÑc*((‚àá‚ãÖu)*(‚àá‚ãÖv)))dŒ© +
                              ‚à´( qf*(‚àá‚ãÖu) - pf*(‚àá‚ãÖv) + œÅw*(‚àÇt(œïf) + (u‚ãÖ‚àá(œïf))) ‚ãÖ œàf + œÅw*ùíü*(‚àá(œïf)‚äô‚àá(œàf)) + œÑ‚Çò·µ©*((‚àá(œïf)'‚ãÖu - Œ∑œïf‚Çô‚Çï)‚ãÖ(‚àá(œàf)'‚ãÖu)) )dŒ©f +
                              ‚à´( qp*(‚àá‚ãÖu) - pp*(‚àá‚ãÖv) + œÅw*(‚àÇt(œïp) + (u‚ãÖ‚àá(œïp))) ‚ãÖ œàp + œÅw*ùíü*(‚àá(œïp)‚äô‚àá(œàp)) + œÑ‚Çò·µ©*((‚àá(œïp)'‚ãÖu - Œ∑œïp‚Çô‚Çï)‚ãÖ(‚àá(œàp)'‚ãÖu)) )dŒ©p +
                              # ‚à´(pf*nb‚ãÖv)dŒìb -
                              ‚à´( œÅw*(mean(u))‚ãÖ(jumpfp(œïf,œïp)*meanfp(œàf,œàp)) + œÅw*ùíü*(meanfp(‚àá(œïf),‚àá(œïp))‚ãÖjumpfp(œàf,œàp)) -
                                 1/K*(mean(u)‚ãÖmean(v) + C*T*(jumpfp(œïf,œïp)‚ãÖmean(v))) )dŒìfp
                              # ‚à´( œÅw*(mean(u))‚ãÖ(jumpfp(œïf,œïp)*meanfp(œàf,œàp)) + œÅw*ùíü*(meanfp(‚àá(œïf),‚àá(œïp))‚ãÖjumpfp(œàf,œàp)) -
                              # 1/K*((mean(u) + C*T*(jumpfp(œïf,œïp)) ‚ãÖmean(v))) )dŒìfp
  jac(t,(u,pf,pp,œïf,œïp),(du,dpf,dpp,dœïf,dœïp),(v,qf,qp,œàf,œàp)) = ‚à´( ((du‚ãÖ‚àá(u)) + (u‚ãÖ‚àá(du))) ‚ãÖ v + Œº*(‚àá(du)‚äô‚àá(v)) +
                                          œÑ‚Çò*((‚àá(u)'‚ãÖu - Œ∑‚Çô‚Çï)‚ãÖ(‚àá(v)'‚ãÖdu) + (‚àá(du)'‚ãÖu + ‚àá(u)'‚ãÖdu)‚ãÖ(‚àá(v)'‚ãÖu)) +
                                          œÑc*((‚àá‚ãÖdu)*(‚àá‚ãÖv)))dŒ© +
                                          ‚à´( qf*(‚àá‚ãÖdu) - dpf*(‚àá‚ãÖv) + œÅw*((u‚ãÖ‚àá(dœïf)) + (du‚ãÖ‚àá(œïf))) ‚ãÖ œàf + œÅw*ùíü*(‚àá(dœïf)‚äô‚àá(œàf)) +
                                          œÑ‚Çò·µ©*( (‚àá(œïf)'‚ãÖu - Œ∑œïf‚Çô‚Çï)‚ãÖ(‚àá(œàf)'‚ãÖdu) + (‚àá(dœïf)'‚ãÖu + ‚àá(œïf)'‚ãÖdu)‚ãÖ(‚àá(œàf)'‚ãÖu)) )dŒ©f +
                                          ‚à´( qp*(‚àá‚ãÖdu) - dpp*(‚àá‚ãÖv) + œÅw*((u‚ãÖ‚àá(dœïp)) + (du‚ãÖ‚àá(œïp))) ‚ãÖ œàp + œÅw*ùíü*(‚àá(dœïp)‚äô‚àá(œàp)) +
                                          œÑ‚Çò·µ©*( (‚àá(œïp)'‚ãÖu - Œ∑œïp‚Çô‚Çï)‚ãÖ(‚àá(œàp)'‚ãÖdu) + (‚àá(dœïp)'‚ãÖu + ‚àá(œïp)'‚ãÖdu)‚ãÖ(‚àá(œàp)'‚ãÖu)))dŒ©p +
                                          # ‚à´( dpf*nb‚ãÖv)dŒìb -
                                          ‚à´( œÅw*(mean(du)‚ãÖ(jumpfp(œïf,œïp)*meanfp(œàf,œàp)) + mean(u)‚ãÖ(jumpfp(dœïf,dœïp)*meanfp(œàf,œàp))) +
                                             œÅw*ùíü*(meanfp(‚àá(dœïf),‚àá(dœïp))‚ãÖjumpfp(œàf,œàp)) -
                                             1/K*(mean(du)‚ãÖmean(v) + C*T*(jumpfp(dœïf,dœïp)‚ãÖmean(v))) )dŒìfp
                                          # ‚à´( œÅw*((mean(du))‚ãÖ(jumpfp(œïf,œïp) + mean(u))‚ãÖ(jumpfp(dœïf,dœïp))*meanfp(œàf,œàp)) + œÅw*ùíü*(meanfp(‚àá(dœïf),‚àá(dœïp))‚ãÖjumpfp(œàf,œàp)) -
                                          # 1/K*((mean(du) + C*T*(jumpfp(dœïf,dœïp)) ‚ãÖmean(v))) )dŒìfp
                                      # ‚à´( œÅw*(mean(du)‚ãÖnfp.‚Å∫)*(jump(œï)*mean(œà)) + œÅw*(mean(u)‚ãÖnfp.‚Å∫)*(jump(dœï)*mean(œà)) +
                                      #    œÅw*ùíü*(mean(‚àá(dœï))‚ãÖjump(œà‚äónfp)) - 1/K*((mean(du) + C*T*jump(dœï*nfp))‚ãÖmean(v)))dŒìfp
  jac_t(t,(u,pf,pp,œï),(dut,dpft,dppt,dœïft,dœïpt),(v,qf,qp,œàf,œàp)) = ‚à´( (dut) ‚ãÖ v + œÅw*(dœïft) ‚ãÖ œàf )dŒ©f + ‚à´( (dut) ‚ãÖ v + œÅw*(dœïpt) ‚ãÖ œàp )dŒ©p
  op = TransientFEOperator(res,jac,jac_t,X,Y)

  # Orthogonal projection
  aŒ∑(Œ∑,Œ∫) = ‚à´( œÑ‚Çò*(Œ∑‚ãÖŒ∫) )dŒ©
  bŒ∑(Œ∫) = ‚à´( œÑ‚Çò*((‚àá(u‚Çô‚Çï)'‚ãÖu‚Çô‚Çï)‚ãÖŒ∫) )dŒ©
  aŒ∑œïf(Œ∑,Œ∫) = ‚à´( œÑ‚Çò·µ©*(Œ∑‚ãÖŒ∫) )dŒ©f
  bŒ∑œïf(Œ∫) = ‚à´( œÑ‚Çò·µ©*((‚àá(œïf‚Çô‚Çï)'‚ãÖu‚Çô‚Çï)‚ãÖŒ∫) )dŒ©f
  aŒ∑œïp(Œ∑,Œ∫) = ‚à´( œÑ‚Çò·µ©*(Œ∑‚ãÖŒ∫) )dŒ©p
  bŒ∑œïp(Œ∫) = ‚à´( œÑ‚Çò·µ©*((‚àá(œïp‚Çô‚Çï)'‚ãÖu‚Çô‚Çï)‚ãÖŒ∫) )dŒ©f
  op_proj = AffineFEOperator(aŒ∑,bŒ∑,Œó,V)
  op_proj_œïf = AffineFEOperator(aŒ∑œïf,bŒ∑œïf,ŒóŒ¶f,Œ®f)
  op_proj_œïp = AffineFEOperator(aŒ∑œïp,bŒ∑œïp,ŒóŒ¶p,Œ®p)
  ls_proj = LUSolver()

  # Solver
  @unpack Œît,tf = params
  nls = NLSolver(show_trace=true,method=:newton,iterations=15)
  ode_solver = ThetaMethod(nls,Œît,1.0)

  # solution
  x‚Çï‚Çú = solve(ode_solver,op,x‚Çï‚ÇÄ,0.0,tf)

  # Post-processing
  filename = datadir("sims","sol")
  createpvd(filename) do pvd
    for ((u‚Çï,pf‚Çï,pp‚Çï,œïf‚Çï,œïp‚Çï),t) in x‚Çï‚Çú
      pvd[t] = createvtk(Œ©,filename*"_$t",cellfields=["u"=>u‚Çï,"pf"=>pf‚Çï,"pp"=>pp‚Çï,"phif"=>œïf‚Çï,"phip"=>œïp‚Çï],order=order)
      u‚Çô‚Çï = interpolate!(u‚Çï,fv_u,U(t))
      œïf‚Çô‚Çï = interpolate!(œïf‚Çï,fv_œïf,Œ¶f(t))
      œïp‚Çô‚Çï = interpolate!(œïp‚Çï,fv_œïp,Œ¶p(t))
      Œ∑‚Çô‚Çï = solve(ls_proj,op_proj)
      Œ∑œïf‚Çô‚Çï = solve(ls_proj,op_proj_œïf)
      Œ∑œïp‚Çô‚Çï = solve(ls_proj,op_proj_œïp)
    end
  end

  return nothing

end

"""
NavierStokes_ConvectionDiffusion_params

This type defines a Parameters object with the default parameters for the
  NS_CD problem.
"""
@with_kw struct NavierStokes_ConvectionDiffusion_params
  H::Float64 = 1.0 # Height of the half-channel
  L::Float64 = 1.0 # Length of the channel
  Œº::Float64 = 1.0e-0 # Dynamic viscosity
  ùíü::Float64 = 1.69e-0 # Diffusion coefficient
  K::Float64 = 3.6e-0 # Permeability of the membrane
  C::Float64 = 0.2641 # Concentration vs osmotic pressure coefficient
  T::Float64 = 298.0 # Temperature
  œÅw::Float64 = 1.0e0 # Density of water
  œÅs::Float64 = 1.0e0 # Density of salt
  nex::Int = 2 # Number of elements in x direction
  ney ::Int = 2 # Number of elements in y direction
  order::Int = 2 # Order of the finite elements
  U‚àû::Float64 = 0.06 # Inlet velocity
  Œît::Float64 = 0.1 # Time step
  tf::Float64 = 0.1 # Final time
end
end
