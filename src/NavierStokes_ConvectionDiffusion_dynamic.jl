module NavierStokes_ConvectionDiffusion_Dynamic
"""
    NavierStokes_ConvectionDiffusion

    This module contains the functions for the Navier-Stokes equations with convection-diffusion.

    # Examples
    ```julia-repl
    julia> using NavierStokes_ConvectionDiffusion
    julia> solve_NSCD()
    ```
"""

using Gridap
using Gridap.FESpaces: zero_free_values, interpolate!
using Gridap.Fields: meas
using Gridap.Geometry
using Parameters
using DrWatson

export NavierStokes_ConvectionDiffusion_dynamic_params, solve_NSCD_dynamic

"""
    solve_NSCD_dynamic(params)

    This function solves the Navier-Stokes equations with convection-diffusion on
    a 2D rectangular domain using the finite element method. We assume a channel
    flow with a parabolic inflow profile and an osmosis membrane in the middle of
    the channel. The membrane is modeled as a Robin boundary condition.

    # Arguments
    - `params::Parameters`: A Parameters object containing the parameters of the problem.

    # Output
    - vtk file with the solution, stored in the `data/sims` folder.
"""
function solve_NSCD_dynamic(params)

  # Define the domain
  @unpack H,L,nex,ney = params
  Œ≥=2.5
  function coord_map(x)
    y = x[2]
    if y<=H/2
      y·µ¢ = H/2-H/2*tanh(Œ≥*(abs(y-H/2)/(H/2)))/tanh(Œ≥)
    else
      y·µ¢ = H/2+H/2*tanh(Œ≥*(abs(y-H/2)/(H/2)))/tanh(Œ≥)
    end
    return VectorValue(x[1],y·µ¢)
  end
  ùíØ = CartesianDiscreteModel((0,L,0,H), (nex,ney),map=coord_map)
  Œ© = Interior(ùíØ)

  # Define boundary tags
  labels_Œ© = get_face_labeling(ùíØ)
  add_tag_from_tags!(labels_Œ©,"membrane",[1,2,3,4,5,6])    # assign the label "bottom" to the entity 1,2 and 5 (bottom corners and bottom side)
  add_tag_from_tags!(labels_Œ©,"inlet",[7])         # assign the label "inlet" to the entity 7 (left side)
  add_tag_from_tags!(labels_Œ©,"outlet",[8])        # assign the label "outlet" to the entity 8 (right side)

  # Define boundaries
  Œìout = Boundary(Œ©, tags="outlet")
  Œì‚Çò = Boundary(Œ©, tags="membrane")
  nŒì‚Çò = get_normal_vector(Œì‚Çò)
  nout = get_normal_vector(Œìout)

  # Boundary condition
  @unpack U‚àû,œï‚àû,p‚Çí = params
  uin((x,y),t) = VectorValue(6*U‚àû*y/H*(1.0-(y/H)),0.0)
  utop((x,y),t) = VectorValue(0.0,0.0)
  œïin((x,y),t) = œï‚àû
  pout((x,y)) = p‚Çí
  uin(t::Real) = x->uin(x,t)
  utop(t::Real) = x->utop(x,t)
  œïin(t::Real) = x->œïin(x,t)

  # Define the finite element spaces
  @unpack order = params
  reffe·µ§ = ReferenceFE(lagrangian,VectorValue{2,Float64},order)
  reffe‚Çö = ReferenceFE(lagrangian,Float64,order-1)
  reffe·µ© = ReferenceFE(lagrangian,Float64,order-1)
  V = TestFESpace(Œ©,reffe·µ§, conformity=:C0, dirichlet_tags=["inlet","membrane"],dirichlet_masks=[(true,true),(true,false)]) #only for U, first is Ux, second is Uy
  U = TransientTrialFESpace(V, [uin,utop])
  Q = TestFESpace(Œ©,reffe‚Çö, conformity=:C0)
  P = TrialFESpace(Q)
  Œ® = TestFESpace(Œ©,reffe·µ©, conformity=:H1, dirichlet_tags=["inlet"])
  Œ¶ = TransientTrialFESpace(Œ®,œïin)
  X = TransientMultiFieldFESpace([U,P,Œ¶])
  Y = MultiFieldFESpace([V,Q,Œ®])

  # Measures
  degree = 2*order
  dŒ© = Measure(Œ©,degree)
  dŒì‚Çò = Measure(Œì‚Çò,degree)
  dŒìout = Measure(Œìout,degree)

  # Physics parameters
  @unpack Œº,œÅw,ùíü,ŒîP,I‚ÇÄ,Œ∫ = params

  # Mesh related variables
  h = CellField(lazy_map(dx->dx^(1/2),get_cell_measure(Œ©)),Œ©)
  Œ± = 1.0

  # Stabilization Parameters
  c‚ÇÅ = 4.0
  c‚ÇÇ = 2.0
  h2 = CellField(get_cell_measure(Œ©),Œ©)
  œÑ‚Çò·µ©(u) = 1/(c‚ÇÅ*(ùíü)/h2 + c‚ÇÇ*((u‚ãÖu).^(1/2))/h)

  # Operators
  res‚ÇÄ((u,p,œï),(v,q,œà)) = ‚à´( œÅw*((u‚ãÖ‚àá(u))‚ãÖv) + Œº*(‚àá(u)‚äô‚àá(v)) + q*(‚àá‚ãÖu) - p*(‚àá‚ãÖv) +
                            (u‚ãÖ‚àá(œï))‚ãÖœà + ùíü*(‚àá(œï)‚äô‚àá(œà)) +
                            œÑ‚Çò·µ©(u)*((‚àá(œï)'‚ãÖu)‚ãÖ(‚àá(œà)'‚ãÖu)) )dŒ© -
                          ‚à´( ( nŒì‚Çò'‚ãÖ(Œº*(‚àá(u)‚ãÖnŒì‚Çò - p*nŒì‚Çò)) ) * (v‚ãÖnŒì‚Çò) +
                            (œï*(u‚ãÖnŒì‚Çò))*œà )dŒì‚Çò +
                          ‚à´( (u‚ãÖnŒì‚Çò - ((ŒîP-Œ∫*œï)/I‚ÇÄ)) * ( nŒì‚Çò'‚ãÖ(Œº*(‚àá(v)‚ãÖnŒì‚Çò - q*nŒì‚Çò)) ) +
                            Œ±/h * (u‚ãÖnŒì‚Çò - ((ŒîP-Œ∫*œï)/I‚ÇÄ)) * (v‚ãÖnŒì‚Çò) )dŒì‚Çò +
                          ‚à´( pout*nout‚ãÖv )dŒìout
  res(t,(u,p,œï),(v,q,œà)) = res‚ÇÄ((u,p,œï),(v,q,œà)) + ‚à´( ‚àÇt(u)‚ãÖv + ‚àÇt(œï)*œà + œÑ‚Çò·µ©(u)*(‚àÇt(œï)*(‚àá(œà)'‚ãÖu)) )dŒ©
  op‚ÇÄ = FEOperator(res,X(0.0),Y)
  op = TransientFEOperator(res,X,Y)

  # Solver
  nls = NLSolver(show_trace=true,method=:newton,iterations=10)

  # solution
  x‚Çï‚ÇÄ = solve(nls,op‚ÇÄ)

  # Solver
  @unpack Œît,tf = params
  ode_solver = ThetaMethod(nls,Œît,1.0)

  # solution
  x‚Çï‚Çú = solve(ode_solver,op,x‚Çï‚ÇÄ,0.0,tf)

  # Post-processing
  filename = datadir("sims","sol")
  createpvd(filename) do pvd
    for ((u‚Çï,p‚Çï,œï‚Çï),t) in x‚Çï‚Çú
      pvd[t] = createvtk(Œ©,filename*"_$t",cellfields=["u"=>u‚Çï,"p"=>p‚Çï,"phi"=>œï‚Çï],order=order)
    end
  end

  return nothing

end

"""
NavierStokes_ConvectionDiffusion_params

This type defines a Parameters object with the default parameters for the
  NS_CD problem.
"""
@with_kw struct NavierStokes_ConvectionDiffusion_params
  H::Float64 = 1.0 # Height of the half-channel
  L::Float64 = 1.0 # Length of the channel
  Œº::Float64 = 1.0e-0 # Dynamic viscosity
  ùíü::Float64 = 1.69e-0 # Diffusion coefficient
  K::Float64 = 3.6e-0 # Permeability of the membrane
  C::Float64 = 0.2641 # Concentration vs osmotic pressure coefficient
  T::Float64 = 298.0 # Temperature
  œÅw::Float64 = 1.0e0 # Density of water
  œÅs::Float64 = 1.0e0 # Density of salt
  nex::Int = 2 # Number of elements in x direction
  ney ::Int = 2 # Number of elements in y direction
  order::Int = 2 # Order of the finite elements
  U‚àû::Float64 = 0.06 # Inlet velocity
  Œît::Float64 = 0.1 # Time step
  tf::Float64 = 0.1 # Final time
end
end
